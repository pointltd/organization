name: CI/CD

on:
  push:
#    branches:
#      - main

jobs:
  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Yandex Cloud Container Registry
        uses: yc-actions/yc-cr-login@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_KEY_TEST }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./infrastructure/docker/app/Dockerfile
          push: true
          tags: cr.yandex/crp4640u3tckkugq0upa/organization-app:${{ github.sha }}
          target: prod

  terraform:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    needs: docker
    env:
      YC_SERVICE_ACCOUNT_KEY_FILE: /tmp/sa-key.json
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
      YC_KEY: ${{ secrets.YC_KEY_TEST }}
      TF_VAR_ORGANIZATION_IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.8"

      - name: Login to Yandex Cloud
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const key = process.env.YC_KEY;
            fs.writeFileSync('/tmp/sa-key.json', key);
            fs.writeFileSync(
              '/home/runner/.terraformrc',
              `provider_installation {
                network_mirror {
                  url = "https://terraform-mirror.yandexcloud.net/"
                  include = ["registry.terraform.io/*/*"]
                }
                direct {
                  exclude = ["registry.terraform.io/*/*"]
                }
              }`
            );

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform/test

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./infrastructure/terraform/test

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./infrastructure/terraform/test

  migrate:
    name: Migrate database
    runs-on: ubuntu-latest
    needs: terraform
    env:
      DATABASE_URL: postgresql://${{ secrets.DB_USER_TEST }}:${{ secrets.DB_PASSWORD_TEST }}@${{ secrets.DB_HOST_TEST }}:5432/${{ secrets.DB_DATABASE_TEST }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Migrate database
        run: |
          docker run -v ./infrastructure/docker/database/migrations:/migrations --network host migrate/migrate -path=/migrations/ -database ${DATABASE_URL} up


